{"version":3,"sources":["../src/index.js"],"names":["isJSON","p","test","context","snapshotsDir","Object","assign","setDir","dir","save","path","snapshot","space","ws","prompt","console","log","colors","promise","answer","promptAndSave","actual","err","Error","res","read","trim","cb","json","expected","code","s","e","erte","SnapshotContext"],"mappings":"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","sourcesContent":["import { resolve } from 'path'\nimport erte from 'erte'\nimport { equal } from 'assert'\nimport reloquent from 'reloquent'\nimport { inspect } from 'util'\nimport { deepEqual } from 'assert-diff'\nimport { read, write, createWritable, ensurePath, writeJSON, readJSON } from 'wrote'\nimport erotic from 'erotic'\n\nconst isJSON = p => /\\.json$/.test(p)\n\nexport default async function context() {\n  let snapshotsDir = ''\n  Object.assign(this, {\n    setDir(dir) {\n      snapshotsDir = dir\n    },\n    save: async (path, snapshot) => {\n      const p = resolve(snapshotsDir, path)\n      await ensurePath(p)\n      if (isJSON(p)) {\n        await writeJSON(p, snapshot, { space: 2 })\n      } else {\n        const ws = await createWritable(p)\n        await write(ws, snapshot)\n      }\n    },\n    prompt: async (snapshot) => {\n      if (typeof snapshot == 'string') {\n        console.log(snapshot) // eslint-disable-line no-console\n      } else {\n        console.log(inspect(snapshot, { colors: true })) // eslint-disable-line\n      }\n      const { promise } = reloquent('save snapshot? ')\n      const answer = await promise\n      return answer == 'y'\n    },\n    promptAndSave: async (\n      path,\n      actual,\n      err = new Error('could not test missing snapshot'),\n    ) => {\n      if (!actual) throw new Error('give snapshot to save')\n      const res = await this.prompt(actual)\n      if (res) {\n        await this.save(path, actual)\n      } else {\n        throw err\n      }\n    },\n    read: async (path) => {\n      const p = resolve(snapshotsDir, path)\n      if (isJSON(p)) {\n        const snapshot = await readJSON(p)\n        return snapshot\n      } else {\n        const snapshot = await read(p)\n        return snapshot.trim()\n      }\n    },\n    test: async (path, actual) => {\n      const cb = erotic(true)\n      const json = isJSON(path)\n      let expected\n      try {\n        expected = await this.read(path)\n        if (json) {\n          deepEqual(actual, expected)\n        } else {\n          equal(actual, expected)\n        }\n      } catch (err) {\n        if (err.code == 'ENOENT') {\n          await this.promptAndSave(path, actual)\n          return\n        }\n        if (!json) {\n          const s = erte(expected, actual)\n          console.log(s) // eslint-disable-line no-console\n          const e = cb('The string didn\\'t match the snapshot.')\n          e.erte = s\n          throw e\n        }\n        const e = cb(err)\n        throw e\n      }\n    },\n  })\n}\n\n/**\n * @typedef {Object} SnapshotContext\n * @property {(path: string) => Promise<string>} read\n * @property {(path: string, snapshot: string) => Promise<string>} save\n * @property {(path: string) => Promise<boolean>} prompt\n * @property {(path: string, actual: string) => Promise} test Test a snapshot.\n * @property {(path: string)} setDir Set the directory to save snapshots.\n */\n\n\n/**\n * @type {SnapshotContext}\n */\nexport const SnapshotContext = {}\n\n"],"file":"index.js"}